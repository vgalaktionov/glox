//go:build ignore

package main

import (
	"fmt"
	"html/template"
	"io/ioutil"
	"log"
	"os"
	"strings"

	"gopkg.in/yaml.v3"
)

type fields map[string]string
type types map[string]fields

func main() {
	if len(os.Args) > 3 || os.Args[1] == "-h" || os.Args[1] == "--help" {
		fmt.Fprintln(os.Stderr, "Usage: go run tools/genast.go <output dir> <base name>")
		os.Exit(64)
	}
	pack := os.Args[1]
	baseName := os.Args[2]
	generateAstNodes(pack, baseName)
}

func generateAstNodes(pack, baseName string) {
	outputPath := fmt.Sprintf("%s_gen.go", strings.ToLower(baseName))

	f, err := os.Create(outputPath)
	if err != nil {
		log.Fatalln("failed to open output file: ", err)
	}
	defer f.Close()

	tpl := template.Must(template.New("").Funcs(template.FuncMap{
		"lower": strings.ToLower,
	}).Parse(baseTempl))

	tb, err := ioutil.ReadFile(strings.ToLower(baseName) + ".yaml")
	if err != nil {
		log.Fatalln("failed to open ast types file: ", err)
	}
	astTypes := make(types)
	err = yaml.Unmarshal(tb, astTypes)

	err = tpl.Execute(f, struct {
		Package, Basename string
		Types             types
	}{
		pack, baseName, astTypes,
	})
	if err != nil {
		log.Fatalln("failed to render template: ", err)
	}
}

const baseTempl string = `// Code generated by go generate; DO NOT EDIT.
package {{ $.Package }}

import "github.com/vgalaktionov/glox/scanner"

type {{ $.Basename }} interface {
	Accept(Visitor) interface{}
}

type Visitor func(Expr) interface{}
{{- range $typeName, $typeFields := $.Types }}

type {{ $typeName }} struct {
{{- range $fieldName, $fieldType := $typeFields }}
	{{ $fieldName }} {{ $fieldType -}}
{{ end }}
}

func (e {{ $typeName }}) Accept(visitor Visitor) interface{} {
	return visitor(e)
}
{{- end -}}
`
